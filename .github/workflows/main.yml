name: Build and Release KHA

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version from package.json
        id: get_version
        run: echo "::set-output name=version::$(jq -r .version < package.json)"

  build-windows:
    runs-on: windows-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
          
      - name: Build for Windows
        run: npm run build:windows
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: List files in dist directory (Windows)
        run: Get-ChildItem -Path dist -Recurse

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: kha-windows
          path: |
            dist/kha Setup ${{ needs.get-version.outputs.version }}.exe
            dist/kha-${{ needs.get-version.outputs.version }}-win.zip
            dist/kha-${{ needs.get-version.outputs.version }}-ia32-win.zip
            dist/kha Setup ${{ needs.get-version.outputs.version }}.exe.blockmap

  build-mac:
    runs-on: macos-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for macOS
        run: npm run build:mac

      - name: List files in dist directory (macOS)
        run: ls -la dist

      - name: Upload macOS installer
        uses: actions/upload-artifact@v4
        with:
          name: kha-mac
          path: |
            dist/kha-${{ needs.get-version.outputs.version }}-arm64-mac.zip
            dist/kha-${{ needs.get-version.outputs.version }}-arm64.dmg
            dist/kha-${{ needs.get-version.outputs.version }}-mac.zip
            dist/kha-${{ needs.get-version.outputs.version }}.dmg
            dist/kha-${{ needs.get-version.outputs.version }}-arm64-mac.zip.blockmap
            dist/kha-${{ needs.get-version.outputs.version }}-arm64.dmg.blockmap
            dist/kha-${{ needs.get-version.outputs.version }}-mac.zip.blockmap
            dist/kha-${{ needs.get-version.outputs.version }}.dmg.blockmap
      
  build-linux:
    runs-on: ubuntu-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for Linux
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: List files in dist directory (Linux)
        run: ls -la dist

      - name: Upload Linux installer
        uses: actions/upload-artifact@v4
        with:
          name: kha-linux
          path: |
            dist/kha-${{ needs.get-version.outputs.version }}.AppImage
            dist/kingdom-hall-attendant-${{ needs.get-version.outputs.version }}.freebsd
            dist/kingdom-hall-attendant-${{ needs.get-version.outputs.version }}.x86_64.rpm
            dist/kingdom-hall-attendant-${{ needs.get-version.outputs.version }}.zip
            dist/kingdom-hall-attendant_${{ needs.get-version.outputs.version }}_amd64.deb
            dist/kingdom-hall-attendant_${{ needs.get-version.outputs.version }}_amd64.snap

  release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version < package.json)" >> $GITHUB_ENV

      - name: Download Windows installer and binaries
        uses: actions/download-artifact@v4
        with:
          name: kha-windows
          path: dist/windows
      

      - name: Download macOS installers
        uses: actions/download-artifact@v4
        with:
          name: kha-mac
          path: dist/macos

      - name: Download Linux installer
        uses: actions/download-artifact@v4
        with:
          name: kha-linux
          path: dist/linux
        
      - name: List downloaded files (Windows)
        run: ls -la dist/windows
        
      - name: List downloaded files (macOS)
        run: ls -la dist/macos
      
      - name: List downloaded files (Linux)
        run: ls -la dist/linux
      
      - name: Set Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          NEW_VERSION="v${{ env.VERSION }}"
          git tag -a "$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "$NEW_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "v${{ env.VERSION }}"
          body: |
            ![Electron version](https://img.shields.io/badge/Electron-v30.0.1-9feaf9)
            
            Actualizamos nuestra app periódicamente para que te resulte aún más fácil realizar tus tareas de la congregación. Siempre estamos trabajando en nuevas características, correcciones de errores y mejoras en el rendimiento de Kingdom Hall Attendant. Asegúrate de tener siempre la última versión para disfrutar de la mejor experiencia. Si tienes algún comentario o problema, comunícate con nosotros a través de livrasand@outlook.com. Nos complace poder ayudarte.
            
            Para descargar la versión correspondiente de Kingdom Hall Attendant, selecciona el binario adecuado según tu plataforma:
            
            - **Windows x64:** También conocida como `x86_64` o simplemente `64-bit`. Esta es la arquitectura más común en la mayoría de las computadoras modernas. Ofrece mejor rendimiento y soporte para más memoria que las versiones de 32 bits.
              - `kha Setup ${{ env.VERSION }}.exe`
              - `kha-${{ env.VERSION }}-win.zip`
            
            - **Windows x86:** Esta es la arquitectura tradicional de 32 bits. Es menos común en sistemas modernos, pero aún se utiliza en dispositivos más antiguos o en situaciones específicas.
              - `kha-${{ env.VERSION }}-ia32-win.zip`
            
            - **macOS ARM64:** Introducida en 2020, esta arquitectura se basa en diseños ARM personalizados por Apple, conocidos como la serie **M** (M1, M1 Pro, M1 Max, M2, etc.).
              - `kha-${{ env.VERSION }}-arm64-mac.zip`
              - `kha-${{ env.VERSION }}-arm64.dmg`
            
            - **macOS Intel x86_64:** Esta arquitectura ha sido la estándar para los dispositivos Mac desde 2006 hasta aproximadamente 2020.
              - `kha-${{ env.VERSION }}-mac.zip`
              - `kha-${{ env.VERSION }}.dmg`
            
            - **Linux:**
              - `kha-${{ env.VERSION }}.AppImage`
            
            - **Hashes:**
              - **Windows x64:** `$(sha256sum dist/windows/kha Setup ${{ env.VERSION }}.exe | awk '{ print $1 }')` - Este comando calcula el hash SHA-256 del instalador para Windows x64, garantizando la integridad del archivo y permitiendo a los auditores verificar que no ha sido alterado.
              - **macOS ARM64:** `$(shasum -a 256 dist/macos/kha-${{ env.VERSION }}-arm64.dmg | awk '{ print $1 }')` - Se utiliza `shasum` para obtener el hash SHA-256 de la imagen de disco para macOS ARM64, asegurando que el archivo es auténtico y no ha sido modificado.
              - **Linux (AppImage):** `$(sha256sum dist/linux/kha-${{ env.VERSION }}.AppImage | awk '{ print $1 }')` - Este comando genera el hash SHA-256 del archivo AppImage en Linux, permitiendo a los expertos en criptografía verificar su integridad.
              - **Windows x86:** `$(sha256sum dist/windows/kha-${{ env.VERSION }}-ia32-win.zip | awk '{ print $1 }')` - Se calcula el hash SHA-256 del archivo ZIP para Windows x86, proporcionando una forma de validar que el archivo no ha sido comprometido.
              - **macOS Intel x86_64:** `$(shasum -a 256 dist/macos/kha-${{ env.VERSION }}.dmg | awk '{ print $1 }')` - Este comando obtiene el hash SHA-256 de la imagen de disco para macOS Intel, asegurando la autenticidad del archivo.
              - **Linux FreeBSD:** `$(sha256sum dist/linux/kingdom-hall-attendant-${{ env.VERSION }}.freebsd | awk '{ print $1 }')` - Se calcula el hash SHA-256 del archivo específico para FreeBSD, permitiendo la verificación de su integridad.
              - **Linux RPM:** `$(sha256sum dist/linux/kingdom-hall-attendant-${{ env.VERSION }}.x86_64.rpm | awk '{ print $1 }')` - Este comando genera el hash SHA-256 del paquete RPM, asegurando que el archivo no ha sido alterado.
              - **Linux DEB:** `$(sha256sum dist/linux/kingdom-hall-attendant_${{ env.VERSION }}_amd64.deb | awk '{ print $1 }')` - Se calcula el hash SHA-256 del paquete DEB, permitiendo a los auditores verificar su integridad.
              - **Linux Snap:** `$(sha256sum dist/linux/kingdom-hall-attendant_${{ env.VERSION }}_amd64.snap | awk '{ print $1 }')` - Este comando obtiene el hash SHA-256 del paquete Snap, asegurando que el archivo es auténtico y no ha sido modificado.
          files: |
            dist/windows/kha Setup ${{ env.VERSION }}.exe
            dist/windows/kha Setup ${{ env.VERSION }}.exe.blockmap
            dist/windows/kha-${{ env.VERSION }}-ia32-win.zip
            dist/windows/kha-${{ env.VERSION }}-win.zip
            dist/macos/kha-${{ env.VERSION }}-arm64-mac.zip
            dist/macos/kha-${{ env.VERSION }}-arm64.dmg
            dist/macos/kha-${{ env.VERSION }}-mac.zip
            dist/macos/kha-${{ env.VERSION }}.dmg
            dist/macos/kha-${{ env.VERSION }}-arm64-mac.zip.blockmap
            dist/macos/kha-${{ env.VERSION }}-arm64.dmg.blockmap
            dist/macos/kha-${{ env.VERSION }}-mac.zip.blockmap
            dist/macos/kha-${{ env.VERSION }}.dmg.blockmap
            dist/linux/kha-${{ env.VERSION }}.AppImage
            dist/linux/kingdom-hall-attendant-${{ env.VERSION }}.freebsd
            dist/linux/kingdom-hall-attendant-${{ env.VERSION }}.x86_64.rpm
            dist/linux/kingdom-hall-attendant-${{ env.VERSION }}.zip
            dist/linux/kingdom-hall-attendant_${{ env.VERSION }}_amd64.deb
            dist/linux/kingdom-hall-attendant_${{ env.VERSION }}_amd64.snap
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

name: Build and Release KHA

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version from package.json
        id: get_version
        run: echo "::set-output name=version::$(jq -r .version < package.json)"

  build-windows:
    runs-on: windows-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for Windows
        run: npm run build:windows
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: List files in dist directory (Windows)
        run: Get-ChildItem -Path dist -Recurse

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: kingdom-hall-attendant-binaries
          path: |
            dist/kha Setup ${{ needs.get-version.outputs.version }}.exe
            dist/kha-${{ needs.get-version.outputs.version }}-win.zip

  build-mac:
    runs-on: macos-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for macOS
        run: npm run build:mac

      - name: List files in dist directory (macOS)
        run: ls -la dist

      - name: Upload macOS installer
        uses: actions/upload-artifact@v4
        with:
          name: electron-mac
          path: |
            dist/kha-${{ needs.get-version.outputs.version }}-arm64-mac.zip
            dist/kha-${{ needs.get-version.outputs.version }}-arm64.dmg
            dist/kha-${{ needs.get-version.outputs.version }}-mac.zip
            dist/kha-${{ needs.get-version.outputs.version }}.dmg

  build-linux:
    runs-on: ubuntu-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for Linux
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: List files in dist directory (Linux)
        run: ls -la dist

      - name: Upload Linux installer
        uses: actions/upload-artifact@v4
        with:
          name: electron-linux
          path: |
            dist/kha-${{ needs.get-version.outputs.version }}.AppImage
            dist/kha-electron_${{ needs.get-version.outputs.version }}_amd64.snap

  - name: List files in dist recursively
    run: ls -R dist

  release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version < package.json)" >> $GITHUB_ENV

      - name: Download Windows installer and binaries
        uses: actions/download-artifact@v4
        with:
          name: kingdom-hall-attendant-binaries
          path: |
            dist/kha Setup ${{ env.VERSION }}.exe
            dist/kha-${{ env.VERSION }}-win.zip

      - name: Download macOS installers
        uses: actions/download-artifact@v4
        with:
          name: electron-mac
          path: |
            dist/kha-${{ env.VERSION }}-arm64-mac.zip
            dist/kha-${{ env.VERSION }}-arm64.dmg
            dist/kha-${{ env.VERSION }}-mac.zip
            dist/kha-${{ env.VERSION }}.dmg

      - name: Download Linux installer
        uses: actions/download-artifact@v4
        with:
          name: electron-linux
          path: dist/linux

      - name: List downloaded files (Windows)
        run: ls -la dist

      - name: List downloaded files (macOS)
        run: ls -la dist

      - name: List downloaded files (Linux)
        run: ls -la dist/linux

      - name: Set Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          NEW_VERSION="v${{ env.VERSION }}"
          git tag -a "$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "$NEW_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "v${{ env.VERSION }}"
          body: |
            ![Electron version](https://img.shields.io/badge/Electron-v30.0.1-9feaf9)
            
            Actualizamos nuestra app periódicamente para que te resulte aún más fácil realizar tus tareas de la congregación. Siempre estamos trabajando en nuevas características, correcciones de errores y mejoras en el rendimiento de Kingdom Hall Attendant. Asegúrate de tener siempre la última versión para disfrutar de la mejor experiencia. Si tienes algún comentario o problema, comunícate con nosotros a través de livrasand@outlook.com o cabal: `cabal://53c815d8d410a5fe3ed6cc03f0f318af142202fd868787d83e5efa77d6211554`. Nos complace poder ayudarte.
          files: |
            dist/dist/kha Setup ${{ env.VERSION }}.exe
            dist/dist/kha-${{ env.VERSION }}-win.zip
            dist/dist/kha-${{ env.VERSION }}-arm64-mac.zip
            dist/dist/kha-${{ env.VERSION }}-arm64.dmg
            dist/dist/kha-${{ env.VERSION }}-mac.zip
            dist/dist/kha-${{ env.VERSION }}.dmg
            dist/linux/kha-${{ env.VERSION }}.AppImage
            dist/linux/kha-electron_${{ env.VERSION }}_amd64.snap
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
